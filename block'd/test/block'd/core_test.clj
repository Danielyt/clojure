(ns block'd.core-test
  (:use clojure.test
        block'd.core
		block'd.logic))

(def empty-board
   [[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]])

(def board-of-threes
   [[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 3 0]
	[0 0 0 0 0 3 3 3 0 0]
	[0 0 0 0 3 3 0 0 0 0]
	[0 0 0 0 3 3 0 0 0 0]
	[0 0 0 0 3 3 0 0 0 0]
	[0 0 0 0 0 0 3 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]])

(def board-of-ones
   [[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 3 0]
	[0 0 0 0 0 1 1 1 0 0]
	[0 0 0 0 1 1 0 0 0 0]
	[0 0 0 0 1 1 0 0 0 0]
	[0 0 0 0 1 1 0 0 0 0]
	[0 0 0 0 0 0 3 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]])

(def empty-board-of-ones
   [[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 3 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 3 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]])

(def uncollapsed-board
   [[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 4 3 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 4 4 0 0 0 0 0 0 0]
	[0 0 0 0 2 4 0 0 3 0]
	[0 0 0 3 2 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 3 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]])

(def collapsed-board
   [[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 4 3 2 0 0 0 0 0]
	[0 4 4 3 2 4 3 0 3 0]])

(def collapsed-board-without-empty-columns
   [[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 4 3 2 0 0 0 0 0]
	[0 4 4 3 2 4 3 3 0 0]])

(def matrix1
   [[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 4 3 2 0 0 0 0 0]
	[0 4 4 3 2 4 3 3 0 0]])

(def matrix2
   [[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 4 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 2 0 0 0 0 0 3 0]
	[0 0 0 0 2 2 0 3 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 1 1 1 0 0 0 0 0]
	[0 1 1 1 1 1 1 1 0 0]])

(def superposition-of-matrix1-and-matrix2
   [[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 4 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 2 0 0 0 0 0 3 0]
	[0 0 0 0 2 2 0 3 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 0 0 0 0 0 0 0 0]
	[0 0 4 3 2 0 0 0 0 0]
	[0 4 4 3 2 4 3 3 0 0]])

(deftest a-test
  (testing "FIXME, I fail."
  	(is (all-empty? empty-board))
  	(is (= (set (get-neighbours [0 0])) #{[0 1] [1 0]}))
  	(is (= (set (get-neighbours [9 14])) #{[9 13] [8 14]}))
  	(is (= (set (get-neighbours [5 6])) #{[5 5] [5 7] [4 6] [6 6]}))
  	(is (= (get-new-neighbours #{[5 10] [6 10]}) #{[4 10] [5 9] [6 9] [7 10] [6 11] [5 11]}))
  	(is (= (make-white board-of-threes [5 8]) board-of-ones))
  	(is (= (unmake-white board-of-ones 3) board-of-threes))
  	(is (= (make-empty board-of-ones) empty-board-of-ones))
  	(is (= collapsed-board (move-down uncollapsed-board)))
  	(is (= (remove-empty-columns collapsed-board) collapsed-board-without-empty-columns))
  	(is (= 9 (count-whites board-of-ones)))
  	(is (= (superpose matrix1 matrix2) superposition-of-matrix1-and-matrix2))
  	(is (= (set (check-columns matrix1)) #{[1 14] [6 14]}))
  	(is (= (set (check-rows matrix1)) #{[2 13] [3 13] [4 13]}))))
	